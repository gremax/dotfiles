let mapleader=","
set encoding=utf-8 nobomb
autocmd! BufWritePost * Neomake

" be iMproved
set nocompatible
" set noshowmode

filetype plugin on
filetype indent on

set exrc

au BufWritePost .vimrc so $MYVIMRC
au BufNewFile,BufRead *.coffee set filetype=coffee
au BufNewFile,BufRead *.slim set ft=slim

call plug#begin()
Plug 'airblade/vim-gitgutter'
Plug 'benmills/vimux'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'danchoi/ri.vim'
Plug 'diepm/vim-rest-console'
Plug 'dockyard/vim-easydir'
Plug 'garbas/vim-snipmate'
Plug 'gregsexton/gitv'
Plug 'guns/xterm-color-table.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'honza/vim-snippets'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'junegunn/fzf.vim'
Plug 'jgdavey/vim-blockle'
Plug 'jgdavey/vim-turbux'
Plug 'johngrib/vim-game-code-break'
Plug 'junegunn/vim-easy-align'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'kien/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'marcweber/vim-addon-mw-utils'
Plug 'metakirby5/codi.vim'
Plug 'mileszs/ack.vim'
Plug 'mxw/vim-jsx'
Plug 'neomake/neomake'
Plug 'ngmy/vim-rubocop'
Plug 'pangloss/vim-javascript'
Plug 'rhysd/vim-crystal'
Plug 'rizzatti/dash.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'szw/vim-tags'
Plug 'tacahiroy/ctrlp-funky'
Plug 'terryma/vim-multiple-cursors'
Plug 'thoughtbot/vim-rspec'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rvm'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/closetag.vim'
" Themes
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'
Plug 'dracula/vim'
Plug 'jpo/vim-railscasts-theme'
Plug 'junegunn/seoul256.vim'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'ryanoasis/vim-devicons'
call plug#end()

" Invisible characters
set list
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮

" Syntax coloring lines that are too long just slows down the world
" set synmaxcol=1200

" Use only 1 space after "." when joining lines instead of 2
" set nojoinspaces

" Don't reset cursor to start of line when moving around
" set nostartofline
set t_Co=256
set background=dark
colorscheme gruvbox

set number
set relativenumber
set numberwidth=5

syntax enable
syntax sync fromstart

set hlsearch                    " highlight the search
set ls=2                        " show a status line even if there's only one window

" Improve vim's scrolling speed
set ttyfast
set ttyscroll=3
set lazyredraw

set wildmenu                    " show completion on the mode-line
set linespace=0                 " number of pixels between the lines
set splitright                  " open vertical splits on the right
set splitbelow                  " open the horizontal split below
" set wrap                        " wrap long lines
set linebreak                   " break lines at word end
set nobackup                    " don't want no backup files
set nowritebackup               " don't make a backup before overwriting a file
set noswapfile                  " no swap files
set hidden                      " hide buffers when abandoned

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=100

" Auto-reload buffers when files are changed on disk
set autoread

" Lines with equal indent form a fold.
set foldmethod=indent
set foldlevel=1
set foldnestmax=10
" Open all folds by default
set nofoldenable

set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories
set undolevels=1000             " How many undos
set undoreload=10000            " number of lines to save for undo

set vb                          " disable alert sound
set showcmd                     " display incomplete commands
set history=100                 " a ton of history

" Default shell and shell syntax and source ~/.bash_profile
set shell=/bin/sh
" let g:is_bash=1

" Whitespace
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode

" Searching
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set scrolloff=0                 " keep a 5 line padding when moving the cursor

set autoindent                  " indent on enter
set smartindent                 " do smart indenting when starting a new line
set shiftround                  " indent to the closest shiftwidth

set switchbuf=""                " do not move focus/cursor to where the buffer is already open
set tagbsearch                  " use binary searching for tags

" The "Press ENTER or type command to continue" prompt is jarring and usually unnecessary.
set shortmess=atI

set ruler
set cursorline
set nowrap
set endofline

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1
set go-=L
" autocmd User Rails let b:surround_{char2nr('-')} = "<% \r %>" " displays <% %> correctly

" Switch between the last two files
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox'

" ruby path for RVM
let g:ruby_path = system('rvm current')
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails,ruby-1.9'

let g:buffergator_viewport_split_policy = 'B'
let g:buffergator_sort_regime = 'mru'

let g:rspec_command = '!bundle exec rspec {spec}'
let g:rspec_runner = "os_x_iterm2"

" The Silver Searcher
let g:ackprg = 'ag --vimgrep'

" Rubocop
let g:vimrubocop_config = '~/.rubocop.yml'

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" remove search highlighting
nnoremap <Leader>h :noh<cr>
" json beautifier with jq (https://github.com/stedolan/jq)
nnoremap <Leader>z :%!jq '.'<CR>

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <Leader><Leader> :NERDTreeToggle<CR>

" CtrlP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:webdevicons_enable_ctrlp = 1

nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

nmap ; :

" Allow to copy/paste between VIM instances
" copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>
" copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>
" paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>

" open ag.vim
nnoremap <leader>a :Ack

" vim-rspec mappings
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>

" move selected block up/down in Visual block mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" vim-jsx
let g:jsx_ext_required = 0

" html2haml
nmap <Leader>m :%!html2haml --erb 2> /dev/null<CR>:set ft=haml<CR>
vmap <Leader>m :!html2haml --erb 2> /dev/null<CR>
